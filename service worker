import 'package:flutter/material.dart';

void main() {
  runApp(MaterialApp(home: MyHomePage()));
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isSwitched = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Flutter Widgets')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Text Widget
            Text(
              _isSwitched ? 'Switch is ON' : 'Switch is OFF',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20), // Adding space between widgets
            
            // Elevated Button Widget
            ElevatedButton(
              onPressed: () => print('Button Pressed!'),
              child: Text('Press Me'),
            ),
            SizedBox(height: 20), // Adding space between widgets
            
            // Container Widget
            Container(
              color: Colors.blue,
              padding: EdgeInsets.all(16),
              child: Text(
                'Container',
                style: TextStyle(color: Colors.white),
              ),
            ),
            SizedBox(height: 20), // Adding space between widgets
            
            // Icon Widget
            Icon(
              Icons.star,
              size: 50,
              color: Colors.yellow,
            ),
            SizedBox(height: 20), // Adding space between widgets
            
            // Switch Widget
            Switch(
              value: _isSwitched,
              onChanged: (value) {
                setState(() {
                  _isSwitched = value;
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}





<html> 
    <title> 
        SW example 
    </title> 
    <body> 
        <h1>Service Worker</h1> 
        <script> 
            if("serviceWorker" in navigator) 
            { 
                navigator.serviceWorker.register('./sw.js').then((result)=>{ 
                    console.warn("result",result) 
                }).catch(function(e){ 
                    console.warn("e",e) 
                }) 
            }else{ 
                console.warn("service worker not working") 
            } 
         </script> 
    </body> 
</html>

sw.js
const CACHE_NAME = 'pwa-cache-v1';
const URLS_TO_CACHE = [
  '/',
  '/index.html',
];
self.addEventListener('install', event => {
  console.warn("SW installed");
  event.waitUntil(
    caches.open(CACHE_NAME).then(cache => {
      return cache.addAll(URLS_TO_CACHE);
    })
  );
});
self.addEventListener('fetch', event => {
  console.warn("SW fetch triggered for", event.request.url);
  event.respondWith(
    caches.match(event.request).then(cached => {
      return cached || fetch(event.request);
    })
  );
});
self.addEventListener('sync', event => {
  console.warn("Background sync event:", event.tag);
  if (event.tag === 'sync-data') {
    event.waitUntil(
      // Example: fake sync task
      fetch('/api/sync', {
        method: 'POST',
        body: JSON.stringify({ synced: true }),
        headers: { 'Content-Type': 'application/json' }
      })
    );
  }
});

Put both files (index.html and sw.js) in the same folder.
Run it on a local server.
python -m http.server in the folder terminal
Then visit http://localhost:8000/index.html
Go to google dev tools and select offline from application -> service workers


